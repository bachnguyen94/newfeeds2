<?php
namespace App\Model\Behavior;
use Cake\ORM\Behavior;
use App\Model\Behavior\Event;
use App\Model\Behavior\EntityInterface;
use Cake\ORM\TableRegistry;
class HasOneCommonBehavior extends Behavior
{
    public function initialize(array $config)
    {
        parent::initialize($config); // TODO: Change the autogenerated stub
    }
    public function afterSave($event, $entity){
        $JoinTable = $event->subject()->alias();
        $SlidesTable = TableRegistry::get('Slides');
        if(isset($entity->id)){
            if($entity->set_number_people == 1 && !$entity->Slides['display_order']){
                //Thực hiện lưu dữ liệu liên kết vào bảng Slides
                $slideExist = $SlidesTable->find()->where(['Slides.recordId' => $entity->id])->first();
                // Nếu chưa tồn tại slide tương ứng với ID của Entity
                if(!$slideExist){
                    $total_slides = $SlidesTable->find()->count();
                    return $this->SlideFactory(null,$total_slides + 1, $JoinTable, $entity->id,true);
                }
                // Nếu tồn tại slide tương ứng với ID của Entity
                if($slideExist && $slideExist->display_order > 0){
                    $total_slides = $SlidesTable->find()->where(['display_order > ' => 0])->count();
                    $query = $SlidesTable->query();
                    $this->query($query, $slideExist->display_order);
                    return $this->SlideFactory($slideExist->id,$total_slides, $JoinTable, $entity->id,true);
                }
            }
            if($entity->set_number_people == 1 && $entity->Slides['display_order']){
                $slideExist = $SlidesTable->find()->where(['Slides.recordId' => $entity->id])->first();
                // Nếu trước đó tồn tại slide tương ứng với ID của Entity
                if(!$slideExist){
                    $query = $SlidesTable->query();
                    $this->queryAddNew($query, $entity->Slides['display_order']);
                    return $this->SlideFactory('null', $entity->Slides['display_order'], $JoinTable, $entity->id, true);
                }
                // Ngược lại thì chỉ xét trong TH id khác nhau
                else{
                    if($slideExist->id != $entity->id){
                        $slideToSwap = $SlidesTable->find()->where(['Slides.display_order' => $entity->Slides['display_order']])->first();
                        $query = $SlidesTable->query();
                        $displayOrderToSwap = $slideToSwap->display_order;
                        $this->updateById($query, $slideExist->display_order, $slideToSwap->id);
                        // Reset query to next update
                        $query = $SlidesTable->query();
                        return $this->updateById($query, $displayOrderToSwap, $slideExist->id);
                    }
                }
            }
            return false;
        }
    }

    public function updateById($query, $display_order, $id){
        if($query->update()
            ->set([
                'display_order' => $display_order,
            ])
            ->where(['Slides.id' => $id])
            ->execute()){
            return true;
        }
        return false;
    }

    public function queryAddNew($query,$display_order){
        if($query->update()
            ->set([
                'display_order = display_order + 1',
            ])
            ->where(['Slides.display_order >= ' => $display_order])
            ->execute()){
            return true;
        }
        return false;
    }

    public function query($query,$display_order){
        if($query->update()
            ->set([
                'display_order = display_order - 1',
            ])
            ->where(['Slides.display_order > ' => $display_order])
            ->execute()){
            return true;
        }
        return false;
    }
    public function SlideFactory($id = null, $display_order, $JoinTable, $recordId, $status){
        $SlidesTable = TableRegistry::get('Slides');
        $slide = $SlidesTable->newEntity();
        $slide->id = $id;
        $slide->display_order = $display_order;
        $slide->table_name = $JoinTable;
        $slide->recordId = $recordId;
        $slide->status = $status;
        $this->saveSlide($slide);
    }
    public function saveSlide($slide){
        if(TableRegistry::get('Slides')->save($slide)){
            return true;
        }else{
            return false;
        }
    }
}